{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u529b\u6263LeetCode","text":"<p>\u5de5\u4f5c\u4e0e\u5b9e\u4e60\u9762\u8bd5</p>"},{"location":"#_1","title":"\u5927\u7eb2","text":"<ul> <li>LeetCode50</li> <li>LeetCode75</li> <li>LeetCode100</li> <li>LeetCode150</li> </ul>"},{"location":"#_2","title":"\u65b9\u6cd5","text":"<p>\u529b\u6263\u9898\u76ee\uff0c\u76f4\u63a5\u770b\u9898\u89e3\uff0c\u4e0d\u9700\u8981\u81ea\u5df1\u505a\uff0c\u56e0\u4e3a\u5237\u529b\u6263\u662f\u4e3a\u4e86\u627e\u5230\u5de5\u4f5c\u800c\u5df2\u3002</p>"},{"location":"LeetCode50/","title":"LeetCode 50","text":""},{"location":"LeetCode50/#_1","title":"\u94fe\u8868\u76f8\u5173","text":""},{"location":"LeetCode50/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":"<p>\u4e2d\u7b49</p> <p>\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002</p> <p>\u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002</p>"},{"location":"LeetCode50/#_2","title":"\u65b9\u6cd5\u4e00\uff1a\u6a21\u62df","text":"<pre><code>class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode *head = nullptr, *tail = nullptr;\n        int carry = 0;\n        while (l1 || l2) {\n            int n1 = l1 ? l1-&gt;val: 0;\n            int n2 = l2 ? l2-&gt;val: 0;\n            int sum = n1 + n2 + carry;\n            if (!head) {\n                head = tail = new ListNode(sum % 10);\n            } else {\n                tail-&gt;next = new ListNode(sum % 10);\n                tail = tail-&gt;next;\n            }\n            carry = sum / 10;\n            if (l1) {\n                l1 = l1-&gt;next;\n            }\n            if (l2) {\n                l2 = l2-&gt;next;\n            }\n        }\n        if (carry &gt; 0) {\n            tail-&gt;next = new ListNode(carry);\n        }\n        return head;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/add-two-numbers/solutions/435246/liang-shu-xiang-jia-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(max(m, n))\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<p>\u4e2d\u7b49</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c <code>n</code> \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002</p>"},{"location":"LeetCode50/#_3","title":"\u65b9\u6cd5\u4e00\uff1a\u8ba1\u7b97\u94fe\u8868\u957f\u5ea6","text":"<pre><code>class Solution {\npublic:\n    int getLength(ListNode* head) {\n        int length = 0;\n        while (head) {\n            ++length;\n            head = head-&gt;next;\n        }\n        return length;\n    }\n\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        int length = getLength(head);\n        ListNode* cur = dummy;\n        for (int i = 1; i &lt; length - n + 1; ++i) {\n            cur = cur-&gt;next;\n        }\n        cur-&gt;next = cur-&gt;next-&gt;next;\n        ListNode* ans = dummy-&gt;next;\n        delete dummy;\n        return ans;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/remove-nth-node-from-end-of-list/solutions/450350/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(L)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_4","title":"\u65b9\u6cd5\u4e8c\uff1a\u6808","text":"<pre><code>class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        stack&lt;ListNode*&gt; stk;\n        ListNode* cur = dummy;\n        while (cur) {\n            stk.push(cur);\n            cur = cur-&gt;next;\n        }\n        for (int i = 0; i &lt; n; ++i) {\n            stk.pop();\n        }\n        ListNode* prev = stk.top();\n        prev-&gt;next = prev-&gt;next-&gt;next;\n        ListNode* ans = dummy-&gt;next;\n        delete dummy;\n        return ans;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/remove-nth-node-from-end-of-list/solutions/450350/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(L)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(L)\u3002</li> </ul>"},{"location":"LeetCode50/#_5","title":"\u65b9\u6cd5\u4e09\uff1a\u53cc\u6307\u9488","text":"<pre><code>class Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        ListNode* first = head;\n        ListNode* second = dummy;\n        for (int i = 0; i &lt; n; ++i) {\n            first = first-&gt;next;\n        }\n        while (first) {\n            first = first-&gt;next;\n            second = second-&gt;next;\n        }\n        second-&gt;next = second-&gt;next-&gt;next;\n        ListNode* ans = dummy-&gt;next;\n        delete dummy;\n        return ans;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/remove-nth-node-from-end-of-list/solutions/450350/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(L)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#83","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":"<p>\u7b80\u5355</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u94fe\u8868\u7684\u5934 <code>head</code> \uff0c \u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21 \u3002\u8fd4\u56de \u5df2\u6392\u5e8f\u7684\u94fe\u8868 \u3002</p>"},{"location":"LeetCode50/#_6","title":"\u65b9\u6cd5\u4e00\uff1a\u4e00\u6b21\u904d\u5386","text":"<pre><code>class Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (!head) {\n            return head;\n        }\n\n        ListNode* cur = head;\n        while (cur-&gt;next) {\n            if (cur-&gt;val == cur-&gt;next-&gt;val) {\n                cur-&gt;next = cur-&gt;next-&gt;next;\n            }\n            else {\n                cur = cur-&gt;next;\n            }\n        }\n\n        return head;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/remove-duplicates-from-sorted-list/solutions/680357/shan-chu-pai-xu-lian-biao-zhong-de-zhong-49v5/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_7","title":"\u5b57\u7b26\u4e32\u76f8\u5173","text":""},{"location":"LeetCode50/#8-atoi","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)","text":"<p>\u4e2d\u7b49</p> <p>\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a <code>myAtoi(string s)</code> \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002</p> <p>\u51fd\u6570 <code>myAtoi(string s)</code> \u7684\u7b97\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li>\u7a7a\u683c\uff1a\u8bfb\u5165\u5b57\u7b26\u4e32\u5e76\u4e22\u5f03\u65e0\u7528\u7684\u524d\u5bfc\u7a7a\u683c\uff08<code>\" \"</code>\uff09</li> <li>\u7b26\u53f7\uff1a\u68c0\u67e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff08\u5047\u8bbe\u8fd8\u672a\u5230\u5b57\u7b26\u672b\u5c3e\uff09\u4e3a <code>'-'</code> \u8fd8\u662f <code>'+'</code>\u3002\u5982\u679c\u4e24\u8005\u90fd\u4e0d\u5b58\u5728\uff0c\u5219\u5047\u5b9a\u7ed3\u679c\u4e3a\u6b63\u3002</li> <li>\u8f6c\u6362\uff1a\u901a\u8fc7\u8df3\u8fc7\u524d\u7f6e\u96f6\u6765\u8bfb\u53d6\u8be5\u6574\u6570\uff0c\u76f4\u5230\u9047\u5230\u975e\u6570\u5b57\u5b57\u7b26\u6216\u5230\u8fbe\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002\u5982\u679c\u6ca1\u6709\u8bfb\u53d6\u6570\u5b57\uff0c\u5219\u7ed3\u679c\u4e3a0\u3002</li> <li>\u820d\u5165\uff1a\u5982\u679c\u6574\u6570\u6570\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4 <code>[\u2212231, 231 \u2212 1]</code> \uff0c\u9700\u8981\u622a\u65ad\u8fd9\u4e2a\u6574\u6570\uff0c\u4f7f\u5176\u4fdd\u6301\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c0f\u4e8e <code>\u2212231</code> \u7684\u6574\u6570\u5e94\u8be5\u88ab\u820d\u5165\u4e3a <code>\u2212231</code> \uff0c\u5927\u4e8e <code>231 \u2212 1</code> \u7684\u6574\u6570\u5e94\u8be5\u88ab\u820d\u5165\u4e3a <code>231 \u2212 1</code> \u3002</li> </ol> <p>\u8fd4\u56de\u6574\u6570\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002</p>"},{"location":"LeetCode50/#_8","title":"\u65b9\u6cd5\u4e00\uff1a\u81ea\u52a8\u673a","text":"<pre><code>class Automaton {\n    string state = \"start\";\n    unordered_map&lt;string, vector&lt;string&gt;&gt; table = {\n        {\"start\", {\"start\", \"signed\", \"in_number\", \"end\"}},\n        {\"signed\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"in_number\", {\"end\", \"end\", \"in_number\", \"end\"}},\n        {\"end\", {\"end\", \"end\", \"end\", \"end\"}}\n    };\n\n    int get_col(char c) {\n        if (isspace(c)) return 0;\n        if (c == '+' or c == '-') return 1;\n        if (isdigit(c)) return 2;\n        return 3;\n    }\npublic:\n    int sign = 1;\n    long long ans = 0;\n\n    void get(char c) {\n        state = table[state][get_col(c)];\n        if (state == \"in_number\") {\n            ans = ans * 10 + c - '0';\n            ans = sign == 1 ? min(ans, (long long)INT_MAX) : min(ans, -(long long)INT_MIN);\n        }\n        else if (state == \"signed\")\n            sign = c == '+' ? 1 : -1;\n    }\n};\n\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        Automaton automaton;\n        for (char c : str)\n            automaton.get(c);\n        return automaton.sign * automaton.ans;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/string-to-integer-atoi/solutions/183164/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#12","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":"<p>\u4e2d\u7b49</p> <p>\u4e03\u4e2a\u4e0d\u540c\u7684\u7b26\u53f7\u4ee3\u8868\u7f57\u9a6c\u6570\u5b57\uff0c\u5176\u503c\u5982\u4e0b\uff1a</p> \u7b26\u53f7 \u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 <p>\u7f57\u9a6c\u6570\u5b57\u662f\u901a\u8fc7\u6dfb\u52a0\u4ece\u6700\u9ad8\u5230\u6700\u4f4e\u7684\u5c0f\u6570\u4f4d\u503c\u7684\u8f6c\u6362\u800c\u5f62\u6210\u7684\u3002\u5c06\u5c0f\u6570\u4f4d\u503c\u8f6c\u6362\u4e3a\u7f57\u9a6c\u6570\u5b57\u6709\u4ee5\u4e0b\u89c4\u5219\uff1a</p> <ul> <li>\u5982\u679c\u8be5\u503c\u4e0d\u662f\u4ee5 4 \u6216 9 \u5f00\u5934\uff0c\u8bf7\u9009\u62e9\u53ef\u4ee5\u4ece\u8f93\u5165\u4e2d\u51cf\u53bb\u7684\u6700\u5927\u503c\u7684\u7b26\u53f7\uff0c\u5c06\u8be5\u7b26\u53f7\u9644\u52a0\u5230\u7ed3\u679c\uff0c\u51cf\u53bb\u5176\u503c\uff0c\u7136\u540e\u5c06\u5176\u4f59\u90e8\u5206\u8f6c\u6362\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002</li> <li>\u5982\u679c\u8be5\u503c\u4ee5 4 \u6216 9 \u5f00\u5934\uff0c\u4f7f\u7528 \u51cf\u6cd5\u5f62\u5f0f\uff0c\u8868\u793a\u4ece\u4ee5\u4e0b\u7b26\u53f7\u4e2d\u51cf\u53bb\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f8b\u5982 4 \u662f 5 (<code>V</code>) \u51cf 1 (<code>I</code>): <code>IV</code> \uff0c9 \u662f 10 (<code>X</code>) \u51cf 1 (<code>I</code>)\uff1a<code>IX</code>\u3002\u4ec5\u4f7f\u7528\u4ee5\u4e0b\u51cf\u6cd5\u5f62\u5f0f\uff1a4 (<code>IV</code>)\uff0c9 (<code>IX</code>)\uff0c40 (<code>XL</code>)\uff0c90 (<code>XC</code>)\uff0c400 (<code>CD</code>) \u548c 900 (<code>CM</code>)\u3002</li> <li>\u53ea\u6709 10 \u7684\u6b21\u65b9\uff08<code>I</code>, <code>X</code>, <code>C</code>, <code>M</code>\uff09\u6700\u591a\u53ef\u4ee5\u8fde\u7eed\u9644\u52a0 3 \u6b21\u4ee5\u4ee3\u8868 10 \u7684\u500d\u6570\u3002\u4f60\u4e0d\u80fd\u591a\u6b21\u9644\u52a0 5 (<code>V</code>)\uff0c50 (<code>L</code>) \u6216 500 (<code>D</code>)\u3002\u5982\u679c\u9700\u8981\u5c06\u7b26\u53f7\u9644\u52a04\u6b21\uff0c\u8bf7\u4f7f\u7528 \u51cf\u6cd5\u5f62\u5f0f\u3002</li> </ul> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002</p>"},{"location":"LeetCode50/#_9","title":"\u65b9\u6cd5\u4e00\uff1a\u6a21\u62df","text":"<pre><code>const pair&lt;int, string&gt; valueSymbols[] = {\n    {1000, \"M\"},\n    {900,  \"CM\"},\n    {500,  \"D\"},\n    {400,  \"CD\"},\n    {100,  \"C\"},\n    {90,   \"XC\"},\n    {50,   \"L\"},\n    {40,   \"XL\"},\n    {10,   \"X\"},\n    {9,    \"IX\"},\n    {5,    \"V\"},\n    {4,    \"IV\"},\n    {1,    \"I\"},\n};\n\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        string roman;\n        for (const auto &amp;[value, symbol] : valueSymbols) {\n            while (num &gt;= value) {\n                num -= value;\n                roman += symbol;\n            }\n            if (num == 0) {\n                break;\n            }\n        }\n        return roman;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/integer-to-roman/solutions/774611/zheng-shu-zhuan-luo-ma-shu-zi-by-leetcod-75rs/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_10","title":"\u65b9\u6cd5\u4e8c\uff1a\u786c\u7f16\u7801\u6570\u5b57","text":"<pre><code>const string thousands[] = {\"\", \"M\", \"MM\", \"MMM\"};\nconst string hundreds[]  = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nconst string tens[]      = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nconst string ones[]      = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        return thousands[num / 1000] + hundreds[num % 1000 / 100] + tens[num % 100 / 10] + ones[num % 10];\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/integer-to-roman/solutions/774611/zheng-shu-zhuan-luo-ma-shu-zi-by-leetcod-75rs/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#13","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u7b80\u5355</p> <p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26: <code>I</code>\uff0c <code>V</code>\uff0c <code>X</code>\uff0c <code>L</code>\uff0c<code>C</code>\uff0c<code>D</code> \u548c <code>M</code>\u3002</p> <pre><code>\u5b57\u7b26          \u6570\u503c\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n</code></pre> <p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 <code>2</code> \u5199\u505a <code>II</code> \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1 \u3002<code>12</code> \u5199\u505a <code>XII</code> \uff0c\u5373\u4e3a <code>X</code> + <code>II</code> \u3002 <code>27</code> \u5199\u505a <code>XXVII</code>, \u5373\u4e3a <code>XX</code> + <code>V</code> + <code>II</code> \u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a <code>IIII</code>\uff0c\u800c\u662f <code>IV</code>\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a <code>IX</code>\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p> <ul> <li><code>I</code> \u53ef\u4ee5\u653e\u5728 <code>V</code> (5) \u548c <code>X</code> (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002</li> <li><code>X</code> \u53ef\u4ee5\u653e\u5728 <code>L</code> (50) \u548c <code>C</code> (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 </li> <li><code>C</code> \u53ef\u4ee5\u653e\u5728 <code>D</code> (500) \u548c <code>M</code> (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002</li> </ul> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002</p>"},{"location":"LeetCode50/#_11","title":"\u65b9\u6cd5\u4e00\uff1a\u6a21\u62df","text":"<pre><code>class Solution {\nprivate:\n    unordered_map&lt;char, int&gt; symbolValues = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L', 50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000},\n    };\n\npublic:\n    int romanToInt(string s) {\n        int ans = 0;\n        int n = s.length();\n        for (int i = 0; i &lt; n; ++i) {\n            int value = symbolValues[s[i]];\n            if (i &lt; n - 1 &amp;&amp; value &lt; symbolValues[s[i + 1]]) {\n                ans -= value;\n            } else {\n                ans += value;\n            }\n        }\n        return ans;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/roman-to-integer/solutions/774992/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#14","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p>\u7b80\u5355</p> <p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002</p> <p>\u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>\"\"</code>\u3002</p>"},{"location":"LeetCode50/#_12","title":"\u65b9\u6cd5\u4e00\uff1a\u6a2a\u5411\u626b\u63cf","text":"<pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        string prefix = strs[0];\n        int count = strs.size();\n        for (int i = 1; i &lt; count; ++i) {\n            prefix = longestCommonPrefix(prefix, strs[i]);\n            if (!prefix.size()) {\n                break;\n            }\n        }\n        return prefix;\n    }\n\n    string longestCommonPrefix(const string&amp; str1, const string&amp; str2) {\n        int length = min(str1.size(), str2.size());\n        int index = 0;\n        while (index &lt; length &amp;&amp; str1[index] == str2[index]) {\n            ++index;\n        }\n        return str1.substr(0, index);\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_13","title":"\u65b9\u6cd5\u4e8c\uff1a\u7eb5\u5411\u626b\u63cf","text":"<pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        int length = strs[0].size();\n        int count = strs.size();\n        for (int i = 0; i &lt; length; ++i) {\n            char c = strs[0][i];\n            for (int j = 1; j &lt; count; ++j) {\n                if (i == strs[j].size() || strs[j][i] != c) {\n                    return strs[0].substr(0, i);\n                }\n            }\n        }\n        return strs[0];\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_14","title":"\u65b9\u6cd5\u4e09\uff1a\u5206\u6cbb","text":"<pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        else {\n            return longestCommonPrefix(strs, 0, strs.size() - 1);\n        }\n    }\n\n    string longestCommonPrefix(const vector&lt;string&gt;&amp; strs, int start, int end) {\n        if (start == end) {\n            return strs[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            string lcpLeft = longestCommonPrefix(strs, start, mid);\n            string lcpRight = longestCommonPrefix(strs, mid + 1, end);\n            return commonPrefix(lcpLeft, lcpRight);\n        }\n    }\n\n    string commonPrefix(const string&amp; lcpLeft, const string&amp; lcpRight) {\n        int minLength = min(lcpLeft.size(), lcpRight.size());\n        for (int i = 0; i &lt; minLength; ++i) {\n            if (lcpLeft[i] != lcpRight[i]) {\n                return lcpLeft.substr(0, i);\n            }\n        }\n        return lcpLeft.substr(0, minLength);\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(m log n)\u3002</li> </ul>"},{"location":"LeetCode50/#_15","title":"\u65b9\u6cd5\u56db\uff1a\u4e8c\u5206\u67e5\u627e","text":"<pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        if (!strs.size()) {\n            return \"\";\n        }\n        int minLength = min_element(strs.begin(), strs.end(), [](const string&amp; s, const string&amp; t) {return s.size() &lt; t.size();})-&gt;size();\n        int low = 0, high = minLength;\n        while (low &lt; high) {\n            int mid = (high - low + 1) / 2 + low;\n            if (isCommonPrefix(strs, mid)) {\n                low = mid;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return strs[0].substr(0, low);\n    }\n\n    bool isCommonPrefix(const vector&lt;string&gt;&amp; strs, int length) {\n        string str0 = strs[0].substr(0, length);\n        int count = strs.size();\n        for (int i = 1; i &lt; count; ++i) {\n            string str = strs[i];\n            for (int j = 0; j &lt; length; ++j) {\n                if (str0[j] != str[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn log m)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#28","title":"28. \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807","text":"<p>\u7b80\u5355</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>haystack</code> \u548c <code>needle</code> \uff0c\u8bf7\u4f60\u5728 <code>haystack</code> \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa <code>needle</code> \u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c <code>needle</code> \u4e0d\u662f <code>haystack</code> \u7684\u4e00\u90e8\u5206\uff0c\u5219\u8fd4\u56de <code>-1</code> \u3002</p>"},{"location":"LeetCode50/#_16","title":"\u65b9\u6cd5\u4e00\uff1a\u66b4\u529b\u5339\u914d","text":"<pre><code>class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int n = haystack.size(), m = needle.size();\n        for (int i = 0; i + m &lt;= n; i++) {\n            bool flag = true;\n            for (int j = 0; j &lt; m; j++) {\n                if (haystack[i + j] != needle[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/732236/shi-xian-strstr-by-leetcode-solution-ds6y/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nm)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#knuth-morris-pratt","title":"\u65b9\u6cd5\u4e8c\uff1aKnuth-Morris-Pratt \u7b97\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int n = haystack.size(), m = needle.size();\n        if (m == 0) {\n            return 0;\n        }\n        vector&lt;int&gt; pi(m);\n        for (int i = 1, j = 0; i &lt; m; i++) {\n            while (j &gt; 0 &amp;&amp; needle[i] != needle[j]) {\n                j = pi[j - 1];\n            }\n            if (needle[i] == needle[j]) {\n                j++;\n            }\n            pi[i] = j;\n        }\n        for (int i = 0, j = 0; i &lt; n; i++) {\n            while (j &gt; 0 &amp;&amp; haystack[i] != needle[j]) {\n                j = pi[j - 1];\n            }\n            if (haystack[i] == needle[j]) {\n                j++;\n            }\n            if (j == m) {\n                return i - m + 1;\n            }\n        }\n        return -1;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/732236/shi-xian-strstr-by-leetcode-solution-ds6y/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n + m)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(m)\u3002</li> </ul>"},{"location":"LeetCode50/#38","title":"38. \u5916\u89c2\u6570\u5217","text":"<p>\u4e2d\u7b49</p> <p>\u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6570\u4f4d\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u7531\u9012\u5f52\u516c\u5f0f\u5b9a\u4e49\uff1a</p> <ul> <li><code>countAndSay(1) = \"1\"</code></li> <li><code>countAndSay(n)</code> \u662f <code>countAndSay(n-1)</code> \u7684\u884c\u7a0b\u957f\u5ea6\u7f16\u7801\u3002</li> </ul> <p>\u884c\u7a0b\u957f\u5ea6\u7f16\u7801\uff08RLE\uff09\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u538b\u7f29\u65b9\u6cd5\uff0c\u5176\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u5c06\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\uff08\u91cd\u590d\u4e24\u6b21\u6216\u66f4\u591a\u6b21\uff09\u66ff\u6362\u4e3a\u5b57\u7b26\u91cd\u590d\u6b21\u6570\uff08\u8fd0\u884c\u957f\u5ea6\uff09\u548c\u5b57\u7b26\u7684\u4e32\u8054\u3002\u4f8b\u5982\uff0c\u8981\u538b\u7f29\u5b57\u7b26\u4e32 <code>\"3322251\"</code> \uff0c\u6211\u4eec\u5c06 <code>\"33\"</code> \u7528 <code>\"23\"</code> \u66ff\u6362\uff0c\u5c06 <code>\"222\"</code> \u7528 <code>\"32\"</code> \u66ff\u6362\uff0c\u5c06 <code>\"5\"</code> \u7528 <code>\"15\"</code> \u66ff\u6362\u5e76\u5c06 <code>\"1\"</code> \u7528 <code>\"11\"</code> \u66ff\u6362\u3002\u56e0\u6b64\u538b\u7f29\u540e\u5b57\u7b26\u4e32\u53d8\u4e3a <code>\"23321511\"</code>\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <code>n</code> \uff0c\u8fd4\u56de \u5916\u89c2\u6570\u5217 \u7684\u7b2c <code>n</code> \u4e2a\u5143\u7d20\u3002</p>"},{"location":"LeetCode50/#_17","title":"\u65b9\u6cd5\u4e00\uff1a\u904d\u5386\u751f\u6210","text":"<pre><code>class Solution {\npublic:\n    string countAndSay(int n) {\n        string prev = \"1\";\n        for (int i = 2; i &lt;= n; ++i) {\n            string curr = \"\";\n            int start = 0;\n            int pos = 0;\n\n            while (pos &lt; prev.size()) {\n                while (pos &lt; prev.size() &amp;&amp; prev[pos] == prev[start]) {\n                    pos++;\n                }\n                curr += to_string(pos - start) + prev[start];\n                start = pos;\n            }\n            prev = curr;\n        }\n\n        return prev;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/count-and-say/solutions/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N \u00d7 M)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(M)\u3002</li> </ul>"},{"location":"LeetCode50/#_18","title":"\u65b9\u6cd5\u4e8c\uff1a\u679a\u4e3e\u67e5\u8868","text":"<pre><code>class Solution {\npublic:\n    string countAndSay(int n) {\n        vector&lt;string&gt; arr = \n        {\nn        };\n        return arr[n];        \n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/count-and-say/solutions/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(C \u00d7 M)\u3002</li> </ul>"},{"location":"LeetCode50/#125","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32","text":"<p>\u7b80\u5355</p> <p>\u5982\u679c\u5728\u5c06\u6240\u6709\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u7b26\u3001\u5e76\u79fb\u9664\u6240\u6709\u975e\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u4e4b\u540e\uff0c\u77ed\u8bed\u6b63\u7740\u8bfb\u548c\u53cd\u7740\u8bfb\u90fd\u4e00\u6837\u3002\u5219\u53ef\u4ee5\u8ba4\u4e3a\u8be5\u77ed\u8bed\u662f\u4e00\u4e2a \u56de\u6587\u4e32 \u3002</p> <p>\u5b57\u6bcd\u548c\u6570\u5b57\u90fd\u5c5e\u4e8e\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u5982\u679c\u5b83\u662f \u56de\u6587\u4e32 \uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</p>"},{"location":"LeetCode50/#_19","title":"\u65b9\u6cd5\u4e00\uff1a\u7b5b\u9009 + \u5224\u65ad","text":"<p>\u5224\u65ad\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\u3002\u7b2c\u4e00\u79cd\u662f\u4f7f\u7528\u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u7ffb\u8f6c API \u5f97\u5230\u9006\u5e8f\u5b57\u7b26\u4e32\u3002</p> <pre><code>class Solution {\npublic:\n    bool isPalindrome(string s) {\n        string sgood;\n        for (char ch: s) {\n            if (isalnum(ch)) {\n                sgood += tolower(ch);\n            }\n        }\n        string sgood_rev(sgood.rbegin(), sgood.rend());\n        return sgood == sgood_rev;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/valid-palindrome/solutions/292148/yan-zheng-hui-wen-chuan-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u662f\u4f7f\u7528\u53cc\u6307\u9488\u3002</p> <pre><code>class Solution {\npublic:\n    bool isPalindrome(string s) {\n        string sgood;\n        for (char ch: s) {\n            if (isalnum(ch)) {\n                sgood += tolower(ch);\n            }\n        }\n        int n = sgood.size();\n        int left = 0, right = n - 1;\n        while (left &lt; right) {\n           if (sgood[left] != sgood[right]) {\n                return false;\n            }\n            ++left;\n            --right;\n        }\n        return true;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/valid-palindrome/solutions/292148/yan-zheng-hui-wen-chuan-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(|s|)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(|s|)\u3002</li> </ul>"},{"location":"LeetCode50/#_20","title":"\u65b9\u6cd5\u4e8c\uff1a\u5728\u539f\u5b57\u7b26\u4e32\u4e0a\u76f4\u63a5\u5224\u65ad","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(string s) {\n        int n = s.size();\n        int left = 0, right = n - 1;\n        while (left &lt; right) {\n            while (left &lt; right &amp;&amp; !isalnum(s[left])) {\n                ++left;\n            }\n            while (left &lt; right &amp;&amp; !isalnum(s[right])) {\n                --right;\n            }\n            if (left &lt; right) {\n                if (tolower(s[left]) != tolower(s[right])) {\n                    return false;\n                }\n                ++left;\n                --right;\n            }\n        }\n        return true;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/valid-palindrome/solutions/292148/yan-zheng-hui-wen-chuan-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(|s|)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#415","title":"415. \u5b57\u7b26\u4e32\u76f8\u52a0","text":"<p>\u7b80\u5355</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570 <code>num1</code> \u548c<code>num2</code> \uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u5e76\u540c\u6837\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u3002</p> <p>\u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa\u7684\u7528\u4e8e\u5904\u7406\u5927\u6574\u6570\u7684\u5e93\uff08\u6bd4\u5982 <code>BigInteger</code>\uff09\uff0c \u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\u3002</p>"},{"location":"LeetCode50/#_21","title":"\u65b9\u6cd5\u4e00\uff1a\u6a21\u62df","text":"<pre><code>class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        string ans = \"\";\n        while (i &gt;= 0 || j &gt;= 0 || add != 0) {\n            int x = i &gt;= 0 ? num1[i] - '0' : 0;\n            int y = j &gt;= 0 ? num2[j] - '0' : 0;\n            int result = x + y + add;\n            ans.push_back('0' + result % 10);\n            add = result / 10;\n            i -= 1;\n            j -= 1;\n        }\n        // \u8ba1\u7b97\u5b8c\u4ee5\u540e\u7684\u7b54\u6848\u9700\u8981\u7ffb\u8f6c\u8fc7\u6765\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/add-strings/solutions/357938/zi-fu-chuan-xiang-jia-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(max(len1, len2))\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_22","title":"\u6808\u548c\u961f\u5217","text":""},{"location":"LeetCode50/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7b80\u5355</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec <code>'('</code>\uff0c<code>')'</code>\uff0c<code>'{'</code>\uff0c<code>'}'</code>\uff0c<code>'['</code>\uff0c<code>']'</code> \u7684\u5b57\u7b26\u4e32 <code>s</code> \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <ol> <li>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</li> <li>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</li> <li>\u6bcf\u4e2a\u53f3\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u76f8\u540c\u7c7b\u578b\u7684\u5de6\u62ec\u53f7\u3002</li> </ol>"},{"location":"LeetCode50/#_23","title":"\u65b9\u6cd5\u4e00\uff1a\u6808","text":"<p>\u540e\u9047\u5230\u7684\u5de6\u62ec\u53f7\u8981\u5148\u95ed\u5408</p> <pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        int n = s.size();\n        if (n % 2 == 1) {\n            return false;\n        }\n\n        unordered_map&lt;char, char&gt; pairs = {\n            {')', '('},\n            {']', '['},\n            {'}', '{'}\n        };\n        stack&lt;char&gt; stk;\n        for (char ch: s) {\n            if (pairs.count(ch)) {\n                if (stk.empty() || stk.top() != pairs[ch]) {\n                    return false;\n                }\n                stk.pop();\n            }\n            else {\n                stk.push(ch);\n            }\n        }\n        return stk.empty();\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/valid-parentheses/solutions/373578/you-xiao-de-gua-hao-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n + |\u03a3|)\u3002</li> </ul>"},{"location":"LeetCode50/#155","title":"155. \u6700\u5c0f\u6808","text":"<p>\u4e2d\u7b49</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 <code>push</code> \uff0c<code>pop</code> \uff0c<code>top</code> \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002</p> <p>\u5b9e\u73b0 <code>MinStack</code> \u7c7b:</p> <ul> <li><code>MinStack()</code> \u521d\u59cb\u5316\u5806\u6808\u5bf9\u8c61\u3002</li> <li><code>void push(int val)</code> \u5c06\u5143\u7d20val\u63a8\u5165\u5806\u6808\u3002</li> <li><code>void pop()</code> \u5220\u9664\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002</li> <li><code>int top()</code> \u83b7\u53d6\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002</li> <li><code>int getMin()</code> \u83b7\u53d6\u5806\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002</li> </ul>"},{"location":"LeetCode50/#_24","title":"\u65b9\u6cd5\u4e00\uff1a\u8f85\u52a9\u6808","text":"<p>\u6808\u7ed3\u6784\u5148\u8fdb\u540e\u51fa\u7684\u6027\u8d28\u3002</p> <p>\u4f7f\u7528\u4e00\u4e2a\u8f85\u52a9\u6808\uff0c\u4e0e\u5143\u7d20\u6808\u540c\u6b65\u63d2\u5165\u4e0e\u5220\u9664\uff0c\u7528\u4e8e\u5b58\u50a8\u4e0e\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u6700\u5c0f\u503c\u3002</p> <pre><code>class MinStack {\n    stack&lt;int&gt; x_stack;\n    stack&lt;int&gt; min_stack;\npublic:\n    MinStack() {\n        min_stack.push(INT_MAX);\n    }\n\n    void push(int x) {\n        x_stack.push(x);\n        min_stack.push(min(min_stack.top(), x));\n    }\n\n    void pop() {\n        x_stack.pop();\n        min_stack.pop();\n    }\n\n    int top() {\n        return x_stack.top();\n    }\n\n    int getMin() {\n        return min_stack.top();\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/min-stack/solutions/242190/zui-xiao-zhan-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> </ul>"},{"location":"LeetCode50/#225","title":"225. \u7528\u961f\u5217\u5b9e\u73b0\u6808","text":"<p>\u7b80\u5355</p> <p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u540e\u5165\u5148\u51fa\uff08LIFO\uff09\u7684\u6808\uff0c\u5e76\u652f\u6301\u666e\u901a\u6808\u7684\u5168\u90e8\u56db\u79cd\u64cd\u4f5c\uff08<code>push</code>\u3001<code>top</code>\u3001<code>pop</code> \u548c <code>empty</code>\uff09\u3002</p> <p>\u5b9e\u73b0 <code>MyStack</code> \u7c7b\uff1a</p> <ul> <li><code>void push(int x)</code> \u5c06\u5143\u7d20 x \u538b\u5165\u6808\u9876\u3002</li> <li><code>int pop()</code> \u79fb\u9664\u5e76\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li><code>int top()</code> \u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li><code>boolean empty()</code> \u5982\u679c\u6808\u662f\u7a7a\u7684\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u3002</li> </ul>"},{"location":"LeetCode50/#_25","title":"\u65b9\u6cd5\u4e00\uff1a\u4e24\u4e2a\u961f\u5217","text":"<pre><code>class MyStack {\npublic:\n    queue&lt;int&gt; queue1;\n    queue&lt;int&gt; queue2;\n\n    /** Initialize your data structure here. */\n    MyStack() {\n\n    }\n\n    /** Push element x onto stack. */\n    void push(int x) {\n        queue2.push(x);\n        while (!queue1.empty()) {\n            queue2.push(queue1.front());\n            queue1.pop();\n        }\n        swap(queue1, queue2);\n    }\n\n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        int r = queue1.front();\n        queue1.pop();\n        return r;\n    }\n\n    /** Get the top element. */\n    int top() {\n        int r = queue1.front();\n        return r;\n    }\n\n    /** Returns whether the stack is empty. */\n    bool empty() {\n        return queue1.empty();\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/implement-stack-using-queues/solutions/432204/yong-dui-lie-shi-xian-zhan-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5165\u6808\u64cd\u4f5cO(n)\uff0c\u5176\u4f59\u64cd\u4f5c\u90fd\u662fO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> </ul>"},{"location":"LeetCode50/#_26","title":"\u65b9\u6cd5\u4e8c\uff1a\u4e00\u4e2a\u961f\u5217","text":"<pre><code>class MyStack {\npublic:\n    queue&lt;int&gt; q;\n\n    /** Initialize your data structure here. */\n    MyStack() {\n\n    }\n\n    /** Push element x onto stack. */\n    void push(int x) {\n        int n = q.size();\n        q.push(x);\n        for (int i = 0; i &lt; n; i++) {\n            q.push(q.front());\n            q.pop();\n        }\n    }\n\n    /** Removes the element on top of the stack and returns that element. */\n    int pop() {\n        int r = q.front();\n        q.pop();\n        return r;\n    }\n\n    /** Get the top element. */\n    int top() {\n        int r = q.front();\n        return r;\n    }\n\n    /** Returns whether the stack is empty. */\n    bool empty() {\n        return q.empty();\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/implement-stack-using-queues/solutions/432204/yong-dui-lie-shi-xian-zhan-by-leetcode-solution/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5165\u6808\u64cd\u4f5cO(n)\uff0c\u5176\u4f59\u64cd\u4f5c\u90fd\u662fO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> </ul>"},{"location":"LeetCode50/#232","title":"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>\u7b80\u5355</p> <p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u5148\u5165\u5148\u51fa\u961f\u5217\u3002\u961f\u5217\u5e94\u5f53\u652f\u6301\u4e00\u822c\u961f\u5217\u652f\u6301\u7684\u6240\u6709\u64cd\u4f5c\uff08<code>push</code>\u3001<code>pop</code>\u3001<code>peek</code>\u3001<code>empty</code>\uff09\uff1a</p> <p>\u5b9e\u73b0 <code>MyQueue</code> \u7c7b\uff1a</p> <ul> <li><code>void push(int x)</code> \u5c06\u5143\u7d20 x \u63a8\u5230\u961f\u5217\u7684\u672b\u5c3e</li> <li><code>int pop()</code> \u4ece\u961f\u5217\u7684\u5f00\u5934\u79fb\u9664\u5e76\u8fd4\u56de\u5143\u7d20</li> <li><code>int peek()</code> \u8fd4\u56de\u961f\u5217\u5f00\u5934\u7684\u5143\u7d20</li> <li><code>boolean empty()</code> \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de <code>true</code> \uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code></li> </ul>"},{"location":"LeetCode50/#_27","title":"\u65b9\u6cd5\u4e00\uff1a\u53cc\u6808","text":"<pre><code>class MyQueue {\nprivate:\n    stack&lt;int&gt; inStack, outStack;\n\n    void in2out() {\n        while (!inStack.empty()) {\n            outStack.push(inStack.top());\n            inStack.pop();\n        }\n    }\n\npublic:\n    MyQueue() {}\n\n    void push(int x) {\n        inStack.push(x);\n    }\n\n    int pop() {\n        if (outStack.empty()) {\n            in2out();\n        }\n        int x = outStack.top();\n        outStack.pop();\n        return x;\n    }\n\n    int peek() {\n        if (outStack.empty()) {\n            in2out();\n        }\n        return outStack.top();\n    }\n\n    bool empty() {\n        return inStack.empty() &amp;&amp; outStack.empty();\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/implement-queue-using-stacks/solutions/632369/yong-zhan-shi-xian-dui-lie-by-leetcode-s-xnb6/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1apush \u548c empty \u4e3a O(1)\uff0cpop \u548c peek \u4e3a\u5747\u644a O(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> </ul>"},{"location":"LeetCode50/#746","title":"746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af","text":"<p>\u7b80\u5355</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>cost</code> \uff0c\u5176\u4e2d <code>cost[i]</code> \u662f\u4ece\u697c\u68af\u7b2c <code>i</code> \u4e2a\u53f0\u9636\u5411\u4e0a\u722c\u9700\u8981\u652f\u4ed8\u7684\u8d39\u7528\u3002\u4e00\u65e6\u4f60\u652f\u4ed8\u6b64\u8d39\u7528\uff0c\u5373\u53ef\u9009\u62e9\u5411\u4e0a\u722c\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u53f0\u9636\u3002</p> <p>\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u4e0b\u6807\u4e3a <code>0</code> \u6216\u4e0b\u6807\u4e3a <code>1</code> \u7684\u53f0\u9636\u5f00\u59cb\u722c\u697c\u68af\u3002</p> <p>\u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u8fbe\u5230\u697c\u68af\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002</p>"},{"location":"LeetCode50/#_28","title":"\u65b9\u6cd5\u4e00\uff1a\u52a8\u6001\u89c4\u5212","text":"<pre><code>class Solution {\npublic:\n    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) {\n        int n = cost.size();\n        vector&lt;int&gt; dp(n + 1);\n        dp[0] = dp[1] = 0;\n        for (int i = 2; i &lt;= n; i++) {\n            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n        }\n        return dp[n];\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/min-cost-climbing-stairs/solutions/528955/shi-yong-zui-xiao-hua-fei-pa-lou-ti-by-l-ncf8/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> </ul> <p>\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u7684\u601d\u60f3\uff0c\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <pre><code>class Solution {\npublic:\n    int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) {\n        int n = cost.size();\n        int prev = 0, curr = 0;\n        for (int i = 2; i &lt;= n; i++) {\n            int next = min(curr + cost[i - 1], prev + cost[i - 2]);\n            prev = curr;\n            curr = next;\n        }\n        return curr;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/min-cost-climbing-stairs/solutions/528955/shi-yong-zui-xiao-hua-fei-pa-lou-ti-by-l-ncf8/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#844","title":"844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32","text":"<p>\u7b80\u5355</p> <p>\u7ed9\u5b9a <code>s</code> \u548c <code>t</code> \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53\u5b83\u4eec\u5206\u522b\u88ab\u8f93\u5165\u5230\u7a7a\u767d\u7684\u6587\u672c\u7f16\u8f91\u5668\u540e\uff0c\u5982\u679c\u4e24\u8005\u76f8\u7b49\uff0c\u8fd4\u56de <code>true</code> \u3002<code>#</code> \u4ee3\u8868\u9000\u683c\u5b57\u7b26\u3002</p>"},{"location":"LeetCode50/#_29","title":"\u65b9\u6cd5\u4e00\uff1a\u91cd\u6784\u5b57\u7b26\u4e32","text":"<pre><code>class Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        return build(S) == build(T);\n    }\n\n    string build(string str) {\n        string ret;\n        for (char ch : str) {\n            if (ch != '#') {\n                ret.push_back(ch);\n            } else if (!ret.empty()) {\n                ret.pop_back();\n            }\n        }\n        return ret;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/backspace-string-compare/solutions/451606/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N + M)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N + M)\u3002</li> </ul>"},{"location":"LeetCode50/#_30","title":"\u65b9\u6cd5\u4e8c\uff1a\u53cc\u6307\u9488","text":"<pre><code>class Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        int i = S.length() - 1, j = T.length() - 1;\n        int skipS = 0, skipT = 0;\n\n        while (i &gt;= 0 || j &gt;= 0) {\n            while (i &gt;= 0) {\n                if (S[i] == '#') {\n                    skipS++, i--;\n                } else if (skipS &gt; 0) {\n                    skipS--, i--;\n                } else {\n                    break;\n                }\n            }\n            while (j &gt;= 0) {\n                if (T[j] == '#') {\n                    skipT++, j--;\n                } else if (skipT &gt; 0) {\n                    skipT--, j--;\n                } else {\n                    break;\n                }\n            }\n            if (i &gt;= 0 &amp;&amp; j &gt;= 0) {\n                if (S[i] != T[j]) {\n                    return false;\n                }\n            } else {\n                if (i &gt;= 0 || j &gt;= 0) {\n                    return false;\n                }\n            }\n            i--, j--;\n        }\n        return true;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/backspace-string-compare/solutions/451606/bi-jiao-han-tui-ge-de-zi-fu-chuan-by-leetcode-solu/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N + M)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_31","title":"\u5176\u4ed6","text":""},{"location":"LeetCode50/#461","title":"461. \u6c49\u660e\u8ddd\u79bb","text":"<p>\u7b80\u5355</p> <p>\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 <code>x</code> \u548c <code>y</code>\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002</p>"},{"location":"LeetCode50/#_32","title":"\u65b9\u6cd5\u4e00\uff1a\u5185\u7f6e\u4f4d\u8ba1\u6570\u529f\u80fd","text":"<pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        return __builtin_popcount(x ^ y);\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/hamming-distance/solutions/797339/yi-ming-ju-chi-by-leetcode-solution-u1w7/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#_33","title":"\u65b9\u6cd5\u4e8c\uff1a\u79fb\u4f4d\u5b9e\u73b0\u4f4d\u8ba1\u6570","text":"<p>\u672c\u65b9\u6cd5\u5c06\u4f7f\u7528\u4f4d\u8fd0\u7b97\u4e2d\u79fb\u4f4d\u7684\u64cd\u4f5c\u5b9e\u73b0\u4f4d\u8ba1\u6570\u529f\u80fd\u3002</p> <pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int s = x ^ y, ret = 0;\n        while (s) {\n            ret += s &amp; 1;\n            s &gt;&gt;= 1;\n        }\n        return ret;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/hamming-distance/solutions/797339/yi-ming-ju-chi-by-leetcode-solution-u1w7/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(log C)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"LeetCode50/#brian-kernighan","title":"\u65b9\u6cd5\u4e09\uff1aBrian Kernighan \u7b97\u6cd5","text":"<pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int s = x ^ y, ret = 0;\n        while (s) {\n            s &amp;= s - 1;\n            ret++;\n        }\n        return ret;\n    }\n};\n\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/hamming-distance/solutions/797339/yi-ming-ju-chi-by-leetcode-solution-u1w7/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n</code></pre> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(log C)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"MySQL/","title":"SQL 50","text":""},{"location":"MySQL/#_1","title":"\u67e5\u8be2","text":""},{"location":"MySQL/#1757","title":"1757. \u53ef\u56de\u6536\u4e14\u4f4e\u8102\u7684\u4ea7\u54c1","text":"<p>\u7b80\u5355</p> <p>SQL Schema</p> <pre><code>Create table If Not Exists Products (product_id int, low_fats ENUM('Y', 'N'), recyclable ENUM('Y','N'))\nTruncate table Products\ninsert into Products (product_id, low_fats, recyclable) values ('0', 'Y', 'N')\ninsert into Products (product_id, low_fats, recyclable) values ('1', 'Y', 'Y')\ninsert into Products (product_id, low_fats, recyclable) values ('2', 'N', 'Y')\ninsert into Products (product_id, low_fats, recyclable) values ('3', 'Y', 'Y')\ninsert into Products (product_id, low_fats, recyclable) values ('4', 'N', 'N')\n</code></pre> <p>\u8868\uff1a<code>Products</code></p> <pre><code>+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| low_fats    | enum    |\n| recyclable  | enum    |\n+-------------+---------+\nproduct_id \u662f\u8be5\u8868\u7684\u4e3b\u952e\uff08\u5177\u6709\u552f\u4e00\u503c\u7684\u5217\uff09\u3002\nlow_fats \u662f\u679a\u4e3e\u7c7b\u578b\uff0c\u53d6\u503c\u4e3a\u4ee5\u4e0b\u4e24\u79cd ('Y', 'N')\uff0c\u5176\u4e2d 'Y' \u8868\u793a\u8be5\u4ea7\u54c1\u662f\u4f4e\u8102\u4ea7\u54c1\uff0c'N' \u8868\u793a\u4e0d\u662f\u4f4e\u8102\u4ea7\u54c1\u3002\nrecyclable \u662f\u679a\u4e3e\u7c7b\u578b\uff0c\u53d6\u503c\u4e3a\u4ee5\u4e0b\u4e24\u79cd ('Y', 'N')\uff0c\u5176\u4e2d 'Y' \u8868\u793a\u8be5\u4ea7\u54c1\u53ef\u56de\u6536\uff0c\u800c 'N' \u8868\u793a\u4e0d\u53ef\u56de\u6536\u3002\n</code></pre> <p>\u7f16\u5199\u89e3\u51b3\u65b9\u6848\u627e\u51fa\u65e2\u662f\u4f4e\u8102\u53c8\u662f\u53ef\u56de\u6536\u7684\u4ea7\u54c1\u7f16\u53f7\u3002</p> <p>\u8fd4\u56de\u7ed3\u679c \u65e0\u987a\u5e8f\u8981\u6c42 \u3002</p>"}]}